<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title></title>
        <description>I want to fix the pothole that's right in front of me before I fall in.</description>
        <link>https://findstar.pe.kr/</link>
        <atom:link href="https://findstar.pe.kr/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Fri, 08 Jun 2018 00:44:07 +0900</pubDate>
        <lastBuildDate>Fri, 08 Jun 2018 00:44:07 +0900</lastBuildDate>
        <generator>Jekyll v3.7.3</generator>
        
            <item>
                <title>ElasticSearch 에서 Index Alias 변경하기</title>
                <description>&lt;h1 id=&quot;6월-3일-일-til&quot;&gt;6월 3일 (일) TIL&lt;/h1&gt;

&lt;p&gt;ElasticSearch 에서 index 의 alias 를 변경하는 방법을 알아보았다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h4 id=&quot;alias-확인&quot;&gt;Alias 확인&lt;/h4&gt;

&lt;p&gt;먼저 ElasticSearch 클러스터에 &lt;code class=&quot;highlighter-rouge&quot;&gt;/_alias&lt;/code&gt; 로 접속하면 현재 생성된 인덱스 들과 연결된 alias 를 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;activity-log-index&quot;: {
    &quot;aliases&quot;: {

    }
  },
  &quot;my-contents-index-v1&quot;: {
    &quot;aliases&quot;: {
      &quot;contents&quot;: {

      }
    }
  },
  &quot;my-contents-index-v2&quot;: {
    &quot;aliases&quot;: {

    }
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;현재 &lt;code class=&quot;highlighter-rouge&quot;&gt;my-contents-index-v1&lt;/code&gt; 이라는 인덱스에 &lt;code class=&quot;highlighter-rouge&quot;&gt;contents&lt;/code&gt; 라는 &lt;em&gt;alias&lt;/em&gt; 가 부여되어 있다. 이를 &lt;code class=&quot;highlighter-rouge&quot;&gt;my-contents-index-v2&lt;/code&gt; 으로 교체해보겠다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -XPOST 'http://my-elasticsearch-host:9200/_aliases?pretty' -d'
{
    &quot;actions&quot; : [
        { &quot;remove&quot; : { &quot;index&quot; : &quot;my-contents-index-v1&quot;, &quot;alias&quot; : &quot;contents&quot; } },
        { &quot;add&quot; : { &quot;index&quot; : &quot;my-contents-index-v2&quot;, &quot;alias&quot; : &quot;contents&quot; } }
    ]
}'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;한번의 쿼리를 통해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;my-contents-index-v1&lt;/code&gt; 에서는 alias 가 삭제되고 &lt;code class=&quot;highlighter-rouge&quot;&gt;my-contents-index-v2&lt;/code&gt; 에는 alias 가 추가되었다.&lt;/p&gt;

&lt;p&gt;이후 다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;/_alias&lt;/code&gt; 로 확인해보면 변경된 결과를 확인가능하다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;activity-log-index&quot;: {
    &quot;aliases&quot;: {

    }
  },
  &quot;my-contents-index-v1&quot;: {
    &quot;aliases&quot;: {

    }
  },
  &quot;my-contents-index-v2&quot;: {
    &quot;aliases&quot;: {
      &quot;contents&quot;: {

      }
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
                <pubDate>Sun, 03 Jun 2018 00:00:00 +0900</pubDate>
                <link>https://findstar.pe.kr/til/2018-06-03-TIL</link>
                <guid isPermaLink="true">https://findstar.pe.kr/til/2018-06-03-TIL</guid>
                
                <category>TIL</category>
                
                <category>alias</category>
                
                <category>index</category>
                
                <category>ElasticSearch</category>
                
                
                <category>TIL (Today I Learned)</category>
                
            </item>
        
            <item>
                <title>logstash와 filebeat 설정하기</title>
                <description>&lt;p&gt;Elasticsearch의 버전업을 지원하기 위해서 logstash 와 filebeat를 새롭게 설치하고 설정해보았다. 진행한 작업 내용을 정리 해보았다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;먼저-서버-구성은-다음과-같다&quot;&gt;먼저 서버 구성은 다음과 같다.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ElasticSearch 클러스터가 별도로 존재&lt;/li&gt;
  &lt;li&gt;LogStash 1대&lt;/li&gt;
  &lt;li&gt;다수의 웹서버에 각각 Filebeat 를 설치.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;full-width caption&quot; style=&quot;border: 1px solid #ededed;&quot;&gt;
    &lt;img src=&quot;/images/posts/elastic/system_stack.png&quot; alt=&quot;시스템 구성도&quot; /&gt;
    
&lt;/figure&gt;

&lt;h2 id=&quot;filebeat&quot;&gt;filebeat&lt;/h2&gt;

&lt;h3 id=&quot;filebeat-설치&quot;&gt;filebeat 설치&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;filebeat 를 yum을 통해서 설치&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;/etc/yum.repods.d/elastic.repo 추가&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[elastic-6.x]
name=Elastic repository for 6.x packages
baseurl=https://artifacts.elastic.co/packages/6.x/yum
gpgcheck=1
gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
enabled=1
autorefresh=1
type=rpm-md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;yum 을 통해서 설치&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install filebeat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;filebeat-설정&quot;&gt;filebeat 설정&lt;/h3&gt;

&lt;p&gt;filebeat 에서는 json 형태로 logstash 에게 데이터를 전달하고, 이때 &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; 필드에 수집한 로그 파일의 데이터가 담겨진다.
수집하려는 log file 의 유형에 따라서 &lt;a href=&quot;https://www.elastic.co/guide/en/beats/libbeat/current/community-beats.html&quot;&gt;community beats&lt;/a&gt;를 사용할 수도 있지만,
나의 경우에는 Custom pattern의 로그 파일을 수집할 예정이라 logstash에서 pasring 하는 형태를 선택했다. (직접 beat를 만들 수도 있다.&lt;a href=&quot;https://www.elastic.co/blog/build-your-own-beat&quot;&gt;링크&lt;/a&gt;, 언어는 golang.)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/filebeat/filebeat.yml&lt;/code&gt; 파일 변경&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;filebeat.prospectors:

# Each - is a prospector. Most options can be set at the prospector level, so
# you can use different prospectors for various configurations.
# Below are the prospector specific configurations.

- type: log
  enabled: true
  paths:
    - /var/log/my_log_path/*.log
  fields:
    index_name: &quot;my_custom_file_index_name&quot;

#----------Elasticsearch output--------------- 주석처리
# (beats 에서 바로 ES 로 데이터 전달하지 않음)


#----------Logstash output ------------------- 주석해제
# (beats 에서 logstash 로 데이터 전달)

output.logstash:
  # The Logstash hosts
  hosts: [&quot;my-logstash-server-host:5044&quot;]

...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;수집할 log를 정의하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;fields&lt;/code&gt; 를 추가하였다. 추가한 &lt;code class=&quot;highlighter-rouge&quot;&gt;fields&lt;/code&gt;는 logstash에 변수로 전달된다. 필요한 경우 여러개를 추가 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;filebeat-실행&quot;&gt;filebeat 실행&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;service filebeat start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;filebeat-데몬-로그-확인&quot;&gt;filebeat 데몬 로그 확인&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tail -f /var/log/filebeat/filebeat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;filebeat-에서-file-을-다시-읽어-들어야-하는-경우&quot;&gt;filebeat 에서 file 을 다시 읽어 들어야 하는 경우&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;filebeat 는 파일을 어디까지 읽어 들였는지 메타 정보를 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib/filebeat/registry&lt;/code&gt; 파일에 기록하고 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;따라서 이 메타 정보를 강제로 reset 하려면 다음과 같이 하면 된다. (경험적으로 설치가 잘 되었는지 확인될 때까지는 메타 정보를 여러번 reset 해야했다.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;[]&quot; &amp;gt; /var/lib/filebeat/registry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;logstash&quot;&gt;logstash&lt;/h2&gt;

&lt;h3 id=&quot;logstash-설치&quot;&gt;logstash 설치&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;logstash 는 Java 가 준비된 환경에서 &lt;a href=&quot;https://www.elastic.co/downloads/logstash&quot;&gt;Download Link&lt;/a&gt;에서 다운받아서 설치했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;logstash-plugin-설치&quot;&gt;logstash plugin 설치&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;사용할 필터중에서 bundle 로 제공되지 않는 alter 설치&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/logstash-plugin install logstash-filter-alter
Validating logstash-filter-alter
Installing logstash-filter-alter
Installation successful
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;logstash-에-filter-설정&quot;&gt;logstash 에 filter 설정&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;grok, mutate, json, geoip, alter 필터를 설정했고 filebeat 에서 fields 로 넘겨받은 index_name을 사용했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;date 필터는 기준 시각을 filebeat 에 의해서 파싱된 시각을 사용하지 않고, log 에 기록된 시각으로 지정하도록 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-config highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; {
      &lt;span class=&quot;n&quot;&gt;beats&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;5044&quot;&lt;/span&gt;
      }
    }
    &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; {
      &lt;span class=&quot;n&quot;&gt;grok&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;%{TIMESTAMP_ISO8601:time}\t%{DATA:tag}\t{ % {DATA:data} }&quot;&lt;/span&gt; }
      }
      &lt;span class=&quot;n&quot;&gt;mutate&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;add_field&lt;/span&gt; =&amp;gt; { &lt;span class=&quot;s2&quot;&gt;&quot;json_data&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;{ %{data}}&quot;&lt;/span&gt; }
      }
      &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;json_data&quot;&lt;/span&gt;
      }
      &lt;span class=&quot;n&quot;&gt;if&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;][&lt;span class=&quot;n&quot;&gt;index_name&lt;/span&gt;] == &lt;span class=&quot;s2&quot;&gt;&quot;qna5&quot;&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;geoip&lt;/span&gt; {
          &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;remote_addr&quot;&lt;/span&gt;
        }
      }
      &lt;span class=&quot;n&quot;&gt;alter&lt;/span&gt; {
          &lt;span class=&quot;n&quot;&gt;remove_field&lt;/span&gt; =&amp;gt; [ &lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;json_data&quot;&lt;/span&gt; ]
      }
      &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; =&amp;gt; [ &lt;span class=&quot;s2&quot;&gt;&quot;time&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;yyyy-MM-dd'T'HH:mm:ssZZ&quot;&lt;/span&gt; ]
      }
    }
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; {
      &lt;span class=&quot;n&quot;&gt;elasticsearch&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;hosts&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;my-elastcisearch-server-host:9200&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;%{[fields][index_name]}-%{+YYYY.MM.dd}&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;document_type&lt;/span&gt; =&amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;%{[fields][index_name]}&quot;&lt;/span&gt;
      }
    }
    &lt;span class=&quot;c&quot;&gt;# debug 를 위해서는 아래의 출력으로 조정.
&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#output {
&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#  stdout { codec =&amp;gt; json }
&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;logstash-실행&quot;&gt;logstash 실행&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nohup logstash/bin/logstash -f logstash.conf &amp;gt; /var/log/logstash/logstash.out
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;elasticsearch-확인&quot;&gt;elasticsearch 확인&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;인덱스와 데이터가 제대로 들어오는지 확인하면 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.elastic.co/guide/en/beats/filebeat/current/setup-repositories.html&lt;/li&gt;
  &lt;li&gt;http://yongho1037.tistory.com/709&lt;/li&gt;
  &lt;li&gt;http://dgkim5360.tistory.com/entry/managing-multiple-heterogeneous-inputs-on-filebeat-and-logstash&lt;/li&gt;
  &lt;li&gt;http://blog.plura.io/?p=3363&lt;/li&gt;
  &lt;li&gt;https://www.elastic.co/guide/en/beats/filebeat/current/configuration-filebeat-options.html#_literal_tags_literal&lt;/li&gt;
  &lt;li&gt;https://github.com/logstash-plugins/logstash-patterns-core/blob/master/patterns/grok-patterns (grok 패턴 모음)&lt;/li&gt;
  &lt;li&gt;https://grokdebug.herokuapp.com/ (grok 패턴 사용시 테스트)&lt;/li&gt;
  &lt;li&gt;https://www.elastic.co/blog/geoip-in-the-elastic-stack (geoip 사용)&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Mon, 28 May 2018 00:00:00 +0900</pubDate>
                <link>https://findstar.pe.kr/2018/05/28/install-and_configuration-filebeat-logstash/</link>
                <guid isPermaLink="true">https://findstar.pe.kr/2018/05/28/install-and_configuration-filebeat-logstash/</guid>
                
                <category>elastic</category>
                
                <category>logstash</category>
                
                <category>filebeat</category>
                
                <category>install</category>
                
                
            </item>
        
            <item>
                <title>CURL 에서 파일 업로드 하기</title>
                <description>&lt;h1 id=&quot;5월-13일-수-til&quot;&gt;5월 13일 (수) TIL&lt;/h1&gt;

&lt;p&gt;작성한 API를 테스트 하기 위해서 &lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt; 이나 &lt;a href=&quot;https://paw.cloud/&quot;&gt;Paw&lt;/a&gt;를 주로 사용하는데,
CURL을 사용해서 CLI에서 테스트해야 되는 경우도 종종 있다. 새롭게 API를 테스트 하던 중 &lt;code class=&quot;highlighter-rouge&quot;&gt;CURL&lt;/code&gt;을 사용해서 파일 업로드 API를 테스트 하는 방법을 확인해 봤다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h4 id=&quot;기본-사용법&quot;&gt;기본 사용법&lt;/h4&gt;

&lt;p&gt;먼저 파일을 업로드 하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;를 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;multipart/form-data&lt;/code&gt; 형식으로 보내야 하는데 이를 위해서 사용할 CURL 옵션은 &lt;code class=&quot;highlighter-rouge&quot;&gt;-F(--form)&lt;/code&gt; 이다. (대문자!!)
그리고 파일의 path를 지정해서 보내면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -F ‘file1=@/upload/file/path’ http://file.testApi.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;여러개-파일-전송&quot;&gt;여러개 파일 전송&lt;/h4&gt;

&lt;p&gt;여러개의 파일을 보내야 하는 경우에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;-F&lt;/code&gt; 옵션을 연속해서 사용하면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -F ‘file1=@/upload/file1/path’ -F ‘file2=@/upload/file2/path’ http://file.testApi.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;파일변수가-배열인-경우&quot;&gt;파일변수가 배열인 경우&lt;/h4&gt;

&lt;p&gt;가끔씩 수신하는 서버의 파일파라미터가 배열연 경우도 있다 이 경우는 아래처럼 하면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -F ‘file[]=@/upload/file1/path’ -F ‘file[]=@/upload/file2/path’ http://file.testApi.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;다른-변수값-함께-전달&quot;&gt;다른 변수값 함께 전달&lt;/h4&gt;

&lt;p&gt;파일과 함께 다른 인자를 같이 넘겨줘야 되는 경우도 있는데 이럴 때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; 형태가 아닌(@ 가 없는) 형태로 보내면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -F ‘file1=@/upload/file/path’ -F 'userId=1' -F 'title=test' http://file.testApi.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;filename-지정&quot;&gt;filename 지정&lt;/h4&gt;

&lt;p&gt;파일인자말고, 원래의 파일이름을 명시하기를 원할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -F ‘file1=@/upload/file/path;filename=Profile1.png’ http://file.testApi.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고 : https://medium.com/@petehouston/upload-files-with-curl-93064dcccc76&lt;/p&gt;

</description>
                <pubDate>Sun, 13 May 2018 00:00:00 +0900</pubDate>
                <link>https://findstar.pe.kr/til/2018-05-13-TIL</link>
                <guid isPermaLink="true">https://findstar.pe.kr/til/2018-05-13-TIL</guid>
                
                <category>TIL</category>
                
                <category>curl</category>
                
                <category>file upload</category>
                
                
                <category>TIL (Today I Learned)</category>
                
            </item>
        
            <item>
                <title>Spring Boot 매뉴얼 뽀개기 1</title>
                <description>&lt;p&gt;관리하던 Spring 프로젝트를 버전업과 함께 Gradle 및 Boot 기반으로 전환하고자 하는 이슈가 있어 회사 동료분과 함께 Spring Boot 를 차근차근 학습해보기로 했다.
Spring Boot 를 좀 더 잘 이해해야겠다는 마음에 시작했는데, 야심차게 &lt;em&gt;“Spring Boot 매뉴얼 뽀개기!”&lt;/em&gt; 라고 스터디 제목을 정했다. (과연..)&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;스터디를 어떤 방식으로 진행할까 고민하다가 &lt;a href=&quot;https://www.youtube.com/watch?v=CnmTCMRTbxo&amp;amp;t=890s&quot;&gt;백기선님의 유튜브&lt;/a&gt;를 참고해서
영상과 함께 매뉴얼을 훑어 보자는 아이디어가 나왔고, 나쁘지 않겠다 싶어서 그렇게 하기로 했다. 일정은 한달 안에 필요한 기능들을 확인하는 걸로 정했다.
어차피 스터디 멤버는 완전 초심자가 아니기 때문에, 결국 대상은 : 자바 스프링을 사용해본 경험이 있으며, 프레임워크 및 개발 경험이 좀 있는 사람이 되었다.
&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started&quot;&gt;Getting Started&lt;/a&gt;를 기준으로
유튜브 영상은 알아서 챙겨보면 될 것 같고, 유튜브상에서는 잘 다루지 않는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Gradle&lt;/code&gt; 만 조금 더 서로 내용을 보강하기로 했다.
(이렇게 말하지만, 사실 난 받아먹는 쪽.. 주도는 동료분께서..)&lt;/p&gt;

&lt;p&gt;오늘은 그 첫번째 기록이다.&lt;/p&gt;

&lt;p&gt;첫번째 날이므로, 기본적인 매뉴얼 페이지를 훑어보고, 목차를 확인하고, 한달간 진행할 분량을 대략 가늠해 보았다.
먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;Getting Started&lt;/code&gt; 페이지의 목차인데, 목차를 보고 느낀건, 매뉴얼에 필요한건 왠만큼 다 있기 때문에,
매뉴얼만 잘 보면 대략적인 구동방식과 기능을 파악하는데 문제가 없겠다는 생각이었다.
그렇지만 다들 매뉴얼을 잘 확인 안하는게 문제다.(RTFM)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I. Spring Boot Documentation
II. Getting Started
III. Using Spring Boot
IV. Spring Boot features
V. Spring Boot Actuator: Production-ready features
VI. Deploying Spring Boot Applications
VII. Spring Boot CLI
VIII. Build tool plugins
IX. ‘How-to’ guides
X. Appendices
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;i-spring-boot-documentation-는-개괄적인-소개이다&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;I. Spring Boot Documentation&lt;/code&gt; 는 개괄적인 소개이다.&lt;/h3&gt;

&lt;h4 id=&quot;1-이-문서에-대해서-설명&quot;&gt;1. 이 문서에 대해서 설명&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/html&quot;&gt;HTML&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/pdf/spring-boot-reference.pdf&quot;&gt;PDF&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/epub/spring-boot-reference.epub&quot;&gt;EPUB&lt;/a&gt; 으로 확인가능하다는 안내&lt;/p&gt;

&lt;h4 id=&quot;2-도움이-필요할-때-다음을-참고하세요&quot;&gt;2. 도움이 필요할 때 다음을 참고하세요.&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring.io&quot;&gt;spring.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;stackoverflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;github issue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-첫번째로-할일&quot;&gt;3. 첫번째로 할일&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-introducing-spring-boot&quot;&gt;소개&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-system-requirements&quot;&gt;시스템 필요사항&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-installing-spring-boot&quot;&gt;설치하기&lt;/a&gt;를 확인하고&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-first-application&quot;&gt;튜토리얼1&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-first-application-code&quot;&gt;튜토리얼2&lt;/a&gt;를 진행해보자.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-first-application-run&quot;&gt;예제1&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started-first-application-executable-jar&quot;&gt;예제2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;4-spring-boot-와-동작하는-것들&quot;&gt;4. Spring Boot 와 동작하는 것들&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Build System: &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-maven&quot;&gt;메이븐&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-gradle&quot;&gt;그래들&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-ant&quot;&gt;Ant&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-starter&quot;&gt;Starter&lt;/a&gt; - 요건 Boot에서 소개하는 것.&lt;/li&gt;
  &lt;li&gt;Best practices : &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-structuring-your-code&quot;&gt;코드 구조&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-configuration-classes&quot;&gt;@Configuration 어노테이션&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-auto-configuration&quot;&gt;@EnableAutoConfiguration 어노테이션&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-spring-beans-and-dependency-injection&quot;&gt;빈과 의존성 주입&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;코드 실행방법 : &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-running-from-an-ide&quot;&gt;IDE&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-running-as-a-packaged-application&quot;&gt;패키지&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-running-with-the-maven-plugin&quot;&gt;메이븐&lt;/a&gt;, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-running-with-the-gradle-plugin&quot;&gt;그래들&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;패키징 : &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-packaging-for-production&quot;&gt;실서버용 JAR 패키징&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#cli&quot;&gt;Spring Boot CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;5-spring-boot-의-기능들&quot;&gt;5. Spring Boot 의 기능들&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;핵심 기능 : Spring Application, External Configuration, Profiles, Logging&lt;/li&gt;
  &lt;li&gt;웹 어플리케이션 : MVC, Embedded Container&lt;/li&gt;
  &lt;li&gt;SQL , NO-SQL&lt;/li&gt;
  &lt;li&gt;Messaging : JMS, RabbitMQ, Kafka 등..&lt;/li&gt;
  &lt;li&gt;Testing&lt;/li&gt;
  &lt;li&gt;Extending&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;6-실서비스에서-활용하기&quot;&gt;6. 실서비스에서 활용하기&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Endpoing 관리&lt;/li&gt;
  &lt;li&gt;HTTP / JMX&lt;/li&gt;
  &lt;li&gt;Monitoring : Metrics, Audting, Tracing, Process&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;7-기타-토픽&quot;&gt;7. 기타 토픽&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Boot Application 배포 : 클라우드.&lt;/li&gt;
  &lt;li&gt;빌드 툴 플러그인 : 메이븐, 그래들&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ii-getting-started-을-참고해서-프로젝트를-실행해-본다&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;II. Getting Started&lt;/code&gt; 을 참고해서 프로젝트를 실행해 본다.&lt;/h3&gt;

&lt;h4 id=&quot;8-spring-boot-소개하기&quot;&gt;8. Spring Boot 소개하기&lt;/h4&gt;

&lt;p&gt;Spring Boot 는 손쉽게 단독으로 실행가능(standalone)한 어플리케이션을 만들 수 있도록 도와줍니다. 또한 실행가능한 &lt;code class=&quot;highlighter-rouge&quot;&gt;jar&lt;/code&gt; 형태로 패키징될 수 있고, 이를 도와주기 위한 CLI도 제공합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;스프링 개발자를 위한 빠르고, 손쉬운 접근이 가능 경험을 제공하는 것을 목표로 합니다.&lt;/li&gt;
  &lt;li&gt;별다른 설정없이도 구동이 가능한 어플리케이션을 만들 수 있습니다.&lt;/li&gt;
  &lt;li&gt;작은 규모에서 부터 큰 프로젝트에 이르기 까지 수용할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;XML 설정을 위한 코드 생성이나 필요사항을 가지지 않습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;9-시스템-요구사항&quot;&gt;9. 시스템 요구사항&lt;/h4&gt;

&lt;p&gt;Spring Boot 2.0.1 버전은 Java 8 또는 9 그리고 스프링프레임워크 5.0.5 이상을 필요로 하고. 빌드툴은 메이븐 3.2+, 그래들4를 지원한다.&lt;/p&gt;

&lt;h4 id=&quot;10-서블릿--다음의-embedded-서블릿을-제공한다&quot;&gt;10. 서블릿 : 다음의 embedded 서블릿을 제공한다.&lt;/h4&gt;

&lt;p&gt;서블릿 3.1 이상을 지원하는 컨테이너들을 지원한다&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Tomcat 8.5&lt;/li&gt;
  &lt;li&gt;Jetty 9.4&lt;/li&gt;
  &lt;li&gt;Undertow 1.4&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;11-설치하기&quot;&gt;11. 설치하기&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;설치는 여러가지 방법이 있는데 일단 먼저 mavan 기반으로 시작해 보도록 한다.&lt;/li&gt;
  &lt;li&gt;먼저 내가 사용하는 IntelliJ 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;new project&lt;/code&gt; 를 선택하고 maven 프로젝트를 선택하자&lt;/li&gt;
  &lt;li&gt;그 다음 groupid ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;com.example&lt;/code&gt;, artifactid ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;demo&lt;/code&gt; 를 지정하고&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt; 를 눌러 project name 과 프로젝트가 저장될 위치를 지정한다.&lt;/li&gt;
  &lt;li&gt;이제 pom.xml 파일에 parent, dependencies, build 를 추가해서 다음처럼 구성하자.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.example&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;demo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Inherit defaults from Spring Boot --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.0.1.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Add typical dependencies for a web application --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Package as an executable jar --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;pom.xml 파일 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-parent&lt;/code&gt; 을 입력할 때 버전을 지정하면, 하위 ex) &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-web&lt;/code&gt; 에서도 동일한 버전을 따른다.&lt;/li&gt;
  &lt;li&gt;IDE 의 View - Tool windows - Maven project view를 열어서 maven reimport 를 실행하자. maven 의존 패키지들을 다운받는다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/java/com.example/&lt;/code&gt; 위치에  &lt;code class=&quot;highlighter-rouge&quot;&gt;Application.java&lt;/code&gt; 파일을 새롭게 작성하자&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.*;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autoconfigure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.*;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.*;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RestController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnableAutoConfiguration&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;maven project view 에서 run maven build 를 실행해서 어플리케이션을 실행시켜 보자 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhsot:8080&lt;/code&gt; 에서 Hello world 를 확인할 수 있다.&lt;/li&gt;
  &lt;li&gt;어노테이션을 조금 살펴보면, &lt;code class=&quot;highlighter-rouge&quot;&gt;@RequestMapping&lt;/code&gt; 어노테이션은 라우팅 정보를 제공한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@RestController&lt;/code&gt; 어노테이션은 콜러에서 직접 결과 문자열을 돌려주도록 스프링에게 지시한다. 이 둘은 spring MVC 어노테이션으로 &lt;a href=&quot;https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/web.html#mvc&quot;&gt;MVC 섹션&lt;/a&gt;에서 더 자세히 보도록 한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableAutoConfiguration&lt;/code&gt; 어노테이션은 추가한 jar를 기반으로 어떻게 스프링을 설정할 것인지 스프링 부트가 추측하도록 지시한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-stater-web&lt;/code&gt;은 톰캣, 스프링 MVC를 추가하기 때문에 자동-설정은 웹 어플리케이션을 개발한다고 예상하고, 그에 따라 스프링을 set up 한다.&lt;/li&gt;
  &lt;li&gt;이제 이 어플리케이션을 패키징 해보자. maven project view 에서 Lifecycle &amp;gt; package 를 실행하면 실행가능한 jar 파일이 target 디렉토리 및에 생성된다.&lt;/li&gt;
  &lt;li&gt;console 에서 java -jar target/demo-1.0-SNAPSHOT.jar 라고 입력해보자. maven project 에서 실행한 결과와 동일한 어플리케이션이 구동된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;일단 첫날은 요정도의 내용을 진행해보았고, 이후에 차근차근 다른 내용을 살펴볼 예정이다. 첫날에는 maven 으로 시작했지만 앞으로의 목표는 &lt;code class=&quot;highlighter-rouge&quot;&gt;gradle&lt;/code&gt;을 추가적으로 적용해보도록 하겠다.&lt;/p&gt;

&lt;p&gt;To be continue..&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started&quot;&gt;Spring Boot Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <pubDate>Wed, 02 May 2018 00:00:00 +0900</pubDate>
                <link>https://findstar.pe.kr/2018/05/02/start-spring-boot-1/</link>
                <guid isPermaLink="true">https://findstar.pe.kr/2018/05/02/start-spring-boot-1/</guid>
                
                <category>study</category>
                
                <category>spring boot</category>
                
                
            </item>
        
            <item>
                <title>Ansible AWX 를 설치해보기</title>
                <description>&lt;p&gt;ansible을 팀에서 사용하면서, 몇가지 &lt;code class=&quot;highlighter-rouge&quot;&gt;이런게 있었으면&lt;/code&gt; 하는 점이 있었는데, 그 중하나가 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;GUI 환경&lt;/code&gt;이다.
물론 CLI 콘솔 상에서 playbook을 실행하는데는 아무 문제가 없고 잘 사용하고 있지만, GUI에서도 보기 쉽게 playbook을 실행하고 또한 누가 언제 playbook을 실행했는지 기록되면 좋겠다는 바램이 있었다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Ansible Tower&lt;/code&gt;는 이러한 바램을 해소시켜 줄 수 있는 대안이라고 생각이 되지만, 라이센스 비용이 비싸기로 유명(?) 해서, 포기하고 있었는데.
Redhat에서 &lt;a href=&quot;https://www.ansible.com/products/awx-project&quot;&gt;Ansible Tower 의 오픈소스 버전으로 Ansible AWX를 발표했다!&lt;/a&gt; (대인배…Redhat.)&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;AWX(Towner의 오픈소스 버전)는 stanalone으로 구동하며, job(playbook) 에 대한 수행 history, 사용자별 권한제어, GUI, 스케줄링을 통한 실행 기능등을 제공한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;접근 권한 제어&lt;/dt&gt;
      &lt;dd&gt;사용자 및 팀을 구성하고 권한을 설정하여 엑세스를 제한할 수 있다.&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;스케줄링&lt;/dt&gt;
      &lt;dd&gt;작업 일정을 예약하고 반복 옵션을 설정할 수 있다 .&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;가시성&lt;/dt&gt;
      &lt;dd&gt;동작중인 job 과 job의 상태, 내역을 확인할 수 있다.&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;인벤토리&lt;/dt&gt;
      &lt;dd&gt;대상 서버들의 구성 및 dynamic inventory 를 사용하여 클라우드에서 동적으로 생성되고 삭제되는 서버들의 list를 관리할 수 있다.&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;단일 시스템으로 구동되는데 사용된 기술은 다음과 같다&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Django&lt;/li&gt;
  &lt;li&gt;Angular JS 1.*&lt;/li&gt;
  &lt;li&gt;Pgsql&lt;/li&gt;
  &lt;li&gt;RabbitMQ&lt;/li&gt;
  &lt;li&gt;memcached&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;초기 발표 때 부터 &lt;a href=&quot;https://github.com/ansible/awx&quot;&gt;Github Repo&lt;/a&gt;를 보면서 버전업과 이슈들을 살펴보았는데, 초기에는 install guide가 부실해서 삽질이 많았다.
1.0.3 부터 docker를 통한 설치가 좀 더 간편해졌기 때문에, 이 버전부터는 그냥 docker 구성으로 설치를 진행했다.
AWX에서는 완성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; 파일을 제공해주지 않기 때문에,
각종 설정을 구성하고, 자체적으로 제공되는 playbook을 실행하면 docker-compose 파일이 생성되는 구조이다. 다음은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Centos 7.4&lt;/code&gt; 에서 AWX의 설치 과정을 기록한 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;필요한 package 설치
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum -y install epel-release
$ sudo yum -y install git gettext ansible docker nodejs npm gcc-c++ bzip2
$ sudo yum -y install python-docker-py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;docker 데몬 시작
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo systemctl start docker
$ sudo systemctl enable docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;awx clone
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/ansible/awx.git
$ cd awx/installer/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;inventory 편집 (핵심!!!)
    &lt;ul&gt;
      &lt;li&gt;설치하려는 환경이 proxy를 통해서 외부에 엑세스 한다면 : &lt;code class=&quot;highlighter-rouge&quot;&gt;host_port&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;http_proxy&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;https_proxy&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;no_proxy&lt;/code&gt;  설정을 자체 환경에 맞게 변경한다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;postgres_data_dir&lt;/code&gt; 위치 변경 : 초기에 &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; 로 잡혀 있는데 이를 그대로 두고 설치하면, 처음에는 잘 뜨지만, OS 가 임시디렉토리를 정리해버리면 DB Data가 날아가 작업한 데이터를 잃어버리는 사태가..&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;use_docker_compose=true&lt;/code&gt; : installer playbook 을 실행하여 나의 환경에 맞춰진 docker-compose.yml 파일을 생성하는것을 enable 하는 옵션. 이후에는 docker-compose를 통해서 컨테이너를 제어하자.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker_compose_dir=/var/lib/awx&lt;/code&gt; : docker-compose를 사용하기로 했다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; 파일이 생성될 디렉토리를 지정해야한다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dockerhub_version&lt;/code&gt; : docker hub 에서 받아올 awx 버전이다. latest 으로 지정되어 있는데. 아직은 안정화가 덜되어 있는것 같아서 가갑적 태그를 지정해서 쓴다. (현재 최신은 &lt;a href=&quot;https://hub.docker.com/r/ansible/awx_web/tags/&quot;&gt;Docker Hub&lt;/a&gt;에서 확인)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다음은 내가 설정한 내역이다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dockerhub_version=1.0.4.83
postgres_data_dir=/var/awx/pgdocker
use_docker_compose=true
docker_compose_dir=/var/lib/awx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;이제 playbook을 실행해서 AWX를 설치한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible-playbook -i inventory install.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;docker_compose_dir 로 이동해보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; 파일이 생성되었다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;이제 웹 브라우저로 접근해보자&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;caption&quot;&gt;
    &lt;img src=&quot;/images/posts/ansible-awx/awx_welcome_screen.png&quot; alt=&quot;welcome awx&quot; /&gt;
    
    &lt;figcaption class=&quot;caption-text&quot;&gt;welcome&lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;초기 접속 계정은 &lt;code class=&quot;highlighter-rouge&quot;&gt;admin/password&lt;/code&gt; 이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;caption&quot;&gt;
    &lt;img src=&quot;/images/posts/ansible-awx/awx-main-dashboard.png&quot; alt=&quot;awx dashboard&quot; /&gt;
    
    &lt;figcaption class=&quot;caption-text&quot;&gt;dashboard&lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;p&gt;여기까지하면, AWX는 설치가 완료된것이다. 이제 project를 설정해보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;credential 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;항목&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;설정값&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Ansible Control Node Credential&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;description&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;playbook 을 실행하기 위해서 control node 에 접속하기 위한 credential&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;organization&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Default&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;type&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;machine&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;username&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ssh 계정명&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;password&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ssh 패스워드&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PRIVILEGE ESCALATION&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sudo&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;project 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;항목&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;설정값&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Project Name&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;description&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;프로젝트 설명&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;organization&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Default&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SCM type&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;git&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SCM Url&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ansible playbook github repo 주소&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SCM Branch&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SCM Update Options&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Clean, Update on Launch 체크&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;inventory 추가&lt;/p&gt;

    &lt;p&gt;ansible 을 CLI 에서 다룰 때는 hosts 파일을 지정하면 되었지만, awx 에서는 target node들을 db로 관리한다. 따라서 연결된 SCM 에서 hosts 파일을 읽어 오거나 (매번 playbook 이 실행되기 전에 hosts 내역을 업데이트 한다)/dynamic inventory(클라우드와 같이 target node 들이 유연하게 생성/삭제되어 변경되는 경우)/ 또는 수동으로 직접 관리할 수 있다..&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;job template 추가&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;항목&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;설정값&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;실행할 playbook 의 제목&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;description&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;실행할 playbook 의 설명&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;job type&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;run  (check 인경우에는 dry run 만 수행)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;inventory&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;UI 상에서 추가한 inventory 연결&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;project&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Project Name&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;playbook&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;프로젝트에 연결된 SCM(git)에서 playbook 리스트를 자동으로 불러와 그 중 하나를 선택한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;machen Credential&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Ansible Control Node Credential : playbook 을 실행하기 위한 control node 에 접속하기 위한 계정정보&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Options&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Enable Privilges Escalation (sudo 필요시 체크)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;run job template&lt;/p&gt;

    &lt;p&gt;template 에서 등록한 job을 run(로켓 모양 아이콘 클릭) 하면 된다. 이렇게 되면 jobs 메뉴에 실행 이력이 추가된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Identity added: /tmp/awx_40_wPmxLi/credential_6 (/tmp/awx_40_wPmxLi/credential_6)
Using /etc/ansible/ansible.cfg as config file


PLAY [all] *********************************************************************

TASK [delete project directory before update] **********************************
skipping: [localhost]

TASK [check repo using git] ****************************************************
skipping: [localhost]

TASK [update project using git] ************************************************
changed: [localhost]

TASK [Set the git repository version] ******************************************
ok: [localhost]

TASK [update project using hg] *************************************************
skipping: [localhost]

TASK [Set the hg repository version] *******************************************
skipping: [localhost]

TASK [parse hg version string properly] ****************************************
skipping: [localhost]

TASK [update project using svn] ************************************************
skipping: [localhost]

TASK [Set the svn repository version] ******************************************
skipping: [localhost]

TASK [parse subversion version string properly] ********************************
skipping: [localhost]

TASK [Ensure the project directory is present] *********************************
skipping: [localhost]

TASK [Fetch Insights Playbook(s)] **********************************************
skipping: [localhost]

TASK [Save Insights Version] ***************************************************
skipping: [localhost]

TASK [Repository Version] ******************************************************
ok: [localhost] =&amp;gt; {
    &quot;msg&quot;: &quot;Repository Version fafb252e642065bff7dfa4349adeade7e085825d&quot;
}

TASK [Write Repository Version] ************************************************
changed: [localhost]

PLAY [all] *********************************************************************

TASK [detect requirements.yml] *************************************************
skipping: [localhost]

TASK [fetch galaxy roles from requirements.yml] ********************************
skipping: [localhost]

PLAY RECAP *********************************************************************
localhost                  : ok=4    changed=2    unreachable=0    failed=0

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 필요한 만큼 job template(playbook)을 연결하고 실행하면 된다.
요약하자면, awx clone =&amp;gt; inventory 파일 설정 =&amp;gt; docker-compose up 이다.
보다 자세한 설치는 &lt;a href=&quot;https://github.com/ansible/awx/blob/devel/INSTALL.md&quot;&gt;install 가이드&lt;/a&gt;를 확인하자.
다음에는 Kubernetes 에서 설치해봐야 겠다.&lt;/p&gt;

&lt;h4 id=&quot;추가-사항&quot;&gt;추가 사항&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;dynamic inventory 설정&lt;/dt&gt;
      &lt;dd&gt;AWS or GCP or OpenStack 과 같이 인스턴스가 dynamic 하게 생성/삭제되는 경우에 target node를 특정할 수 없다. 이런경우 Cloud insfra 에서 지원되는 API를 통해서 inventory target node(hosts)를 질의해오는 방법이 있는데 이를 dynamic inventory라고 한다.&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;AWX 는 standalone 으로 API 서버로 동작이 가능하다. 따라서 jenkins 나 다른 툴/시스템에서 API를 호출하여 job template을 실행할 수 있다. https://github.com/ansible/tower-cli 를 참고.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;예제 - https://github.com/ansible/ansible-examples&lt;/li&gt;
  &lt;li&gt;Best priatices - http://docs.ansible.com/ansible/latest/playbooks_best_practices.html&lt;/li&gt;
  &lt;li&gt;Ansible Essential - https://www.ansible.com/blog/ansible-best-practices-essentials&lt;/li&gt;
  &lt;li&gt;AWX 사용 - https://steemit.com/utopian-io/@adson/ansible-open-sources-ansible-tower-with-awx&lt;/li&gt;
&lt;/ul&gt;

</description>
                <pubDate>Wed, 04 Apr 2018 00:00:00 +0900</pubDate>
                <link>https://findstar.pe.kr/2018/04/04/ansible-awx-installation/</link>
                <guid isPermaLink="true">https://findstar.pe.kr/2018/04/04/ansible-awx-installation/</guid>
                
                <category>ansible</category>
                
                <category>awx</category>
                
                <category>installation</category>
                
                <category>ansible tower</category>
                
                
            </item>
        
            <item>
                <title>ElasticSearch 에서 null 과 empty string 의 차이</title>
                <description>&lt;h1 id=&quot;1월-24일-수-til&quot;&gt;1월 24일 (수) TIL&lt;/h1&gt;

&lt;p&gt;ElasticSearch 에서 indexing 을 처리할 때, json 객체를 생성하면서 속성값이 때로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 또 어떨때는 빈 문자열 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt; 로 채워넣을 때가 있었는데
보다 명확하게 이해하고 처리하기 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 값과 &lt;code class=&quot;highlighter-rouge&quot;&gt;empty string(&quot;&quot;)&lt;/code&gt; 의 차이를 알아보았다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;span class=&quot;evidence&quot;&gt;결론부터 말하자면 둘의 차이는 없다라고 이야기 할 수 있겠다.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그 이유는 바로 inverted index 를 생각하면 알 수 있는 건데, &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 과 &lt;code class=&quot;highlighter-rouge&quot;&gt;empty string&lt;/code&gt; 은 둘다 analyzer 에 의해서 분석된 이후
inverted index를 하나이상 생성하지 못하기 떄문에 ES 입장에서는 둘의 차이가 없는 것이다.&lt;/p&gt;

&lt;p&gt;그렇다면&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;empty string&lt;/code&gt; 과 다르게 아예 mapping field 가 없는 경우는 어떠한가? 이 또한 inverted index 가 생성되지 않기 때문에 동일하게 취급되는가?&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 경우에도 마찬가지다. inverted index 가 생성되지 않기 때문에, 두개는 동일하게 취급된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exist&lt;/code&gt; 쿼리를 사용해도 마찬가지다. 다음의 5개 데이터가 있다고 가정해보자.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{ &quot;tags&quot; : [&quot;search&quot;]                } // id 1
{ &quot;tags&quot; : [&quot;search&quot;, &quot;open_source&quot;] } // id 2
{ &quot;other_field&quot; : &quot;some data&quot;        } // id 3
{ &quot;tags&quot; : null                      } // id 4
{ &quot;tags&quot; : [&quot;search&quot;, null]          } // id 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아래와 같이 질의를 하면,&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;query&quot; : {
        &quot;constant_score&quot; : {
            &quot;filter&quot; : {
                &quot;exists&quot; : { &quot;field&quot; : &quot;tags&quot; }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음의 결과를 확인가능하다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;hits&quot; : [
    {
      &quot;_id&quot; :     &quot;1&quot;,
      &quot;_score&quot; :  1.0,
      &quot;_source&quot; : { &quot;tags&quot; : [&quot;search&quot;] }
    },
    {
      &quot;_id&quot; :     &quot;5&quot;,
      &quot;_score&quot; :  1.0,
      &quot;_source&quot; : { &quot;tags&quot; : [&quot;search&quot;, null] }
    },
    {
      &quot;_id&quot; :     &quot;2&quot;,
      &quot;_score&quot; :  1.0,
      &quot;_source&quot; : { &quot;tags&quot; : [&quot;search&quot;, &quot;open source&quot;] }
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;결과는 exist 쿼리를 질의해도 3, 4번 데이터가 hit 되지 않는다. mapping field 가 아예 존재하지 않는 경우와 null, empty string 인 경우 모두 동일하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;그렇다면, 속성값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 인 document를 DSL 을 통해서 찾을 수 있을까?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래와 같이 질의하면,&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;query&quot; : {
        &quot;constant_score&quot; : {
            &quot;filter&quot;: {
                &quot;missing&quot; : { &quot;field&quot; : &quot;tags&quot; }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음의 결과를 확인가능하다&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;hits&quot; : [
    {
      &quot;_id&quot; :     &quot;3&quot;,
      &quot;_score&quot; :  1.0,
      &quot;_source&quot; : { &quot;other_field&quot; : &quot;some data&quot; }
    },
    {
      &quot;_id&quot; :     &quot;4&quot;,
      &quot;_score&quot; :  1.0,
      &quot;_source&quot; : { &quot;tags&quot; : null }
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;mapping field 상에서 존재하지 않는 경우와, value 가 null 인 경우 모두를 찾는다. 따라서 아예 field가 없는 경우만 딱 지정해서 찾을 수는 없다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;요약하자면, inverted index를 기준으로 모든 ES query 와 data를 생각하면 된다는 것이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, empty string(“”), missing field 모두 동일하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;참고 : https://www.elastic.co/guide/en/elasticsearch/guide/current/_dealing_with_null_values.html&lt;/p&gt;
</description>
                <pubDate>Wed, 24 Jan 2018 00:00:00 +0900</pubDate>
                <link>https://findstar.pe.kr/til/2018-01-24-TIL</link>
                <guid isPermaLink="true">https://findstar.pe.kr/til/2018-01-24-TIL</guid>
                
                <category>TIL</category>
                
                <category>ElasticSearch</category>
                
                <category>empty string</category>
                
                <category>difference</category>
                
                
                <category>TIL (Today I Learned)</category>
                
            </item>
        
            <item>
                <title>Golang 에서 Mysql 데이터를 Struct 에 Scan 할 때 Null 처리 경험기</title>
                <description>&lt;h1 id=&quot;1월-23일-화-til&quot;&gt;1월 23일 (화) TIL&lt;/h1&gt;

&lt;p&gt;최근 ElasticSearch 에 bulk insert 를 하기 위한 golang 기반의 간단한 툴을 만들고 있다.
mysql 에서 데이터를 가져온 다음에 이를 JSON으로 변환해서 ElasticSearch로 bulk insert 하는 구조인데, 이 과정에서 mysql rows 를 golang 에서 scan 하면서 알게된 내용을 정리해보았다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;먼저 golang 툴을 만들면서 사용한 패키지는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&quot;gopkg.in/olivere/elastic.v5&quot;
	&quot;database/sql&quot;
	_ &quot;github.com/go-sql-driver/mysql&quot;
	&quot;encoding/json&quot;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;처음 생성한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt;라는 이름의 struct는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type Post struct {
	PostId         int64          `json:&quot;postId&quot;`
	AuthorId       int64          `json:&quot;authorId&quot;`
	Category       int64          `json:&quot;categoryId&quot;`
	Title          string         `json:&quot;title&quot;`
	Content        string         `json:&quot;content&quot;`
	Created        string         `json:&quot;created&quot;`
	Ip             string         `json:&quot;-&quot;`
	Ip1            int64          `json:&quot;ip1&quot;`
	Ip2            int64          `json:&quot;ip2&quot;`
	Ip3            int64          `json:&quot;ip3&quot;`
	Ip4            int64          `json:&quot;ip4&quot;`
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;처음에는 쿼리를 해온 다음에 &lt;code class=&quot;highlighter-rouge&quot;&gt;rows.Scan&lt;/code&gt; 와 같이 Post type 의 속성에 값을 넣으면 되겠지라고 생각했었는데, 실제로는 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 인경우 에러가 발생한다
(여기서는 category 값이 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 인 경우가 존재했다.)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sql: Scan error on column index 3: unsupported driver -&amp;gt; Scan pair: &amp;lt;nil&amp;gt; -&amp;gt; *int64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;따라서 이경우는 sql 패키지에서 제공하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;sql.NullString&lt;/code&gt;을 사용해야 한다.&lt;/p&gt;

&lt;p&gt;NullString 은 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;valid&lt;/code&gt; 를 확인해서 그 값을 이용해야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if post.RawCategoryId.Valid  {
    post.CategoryId = post.RawCategoryId.Int64
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;최종적으로 struct 는 다음처럼 구성했다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type Post struct {
	PostId         int64          `json:&quot;postId&quot;`
	AuthorId       int64          `json:&quot;authorId&quot;`
	RawCategory    sql.NullInt64  `json:&quot;-&quot;`
	Category       int64          `json:&quot;categoryId&quot;`
	Title          string         `json:&quot;title&quot;`
	Content        string         `json:&quot;content&quot;`
	Created        string         `json:&quot;created&quot;`
	Ip             string         `json:&quot;-&quot;`
	Ip1            int64          `json:&quot;ip1&quot;`
	Ip2            int64          `json:&quot;ip2&quot;`
	Ip3            int64          `json:&quot;ip3&quot;`
	Ip4            int64          `json:&quot;ip4&quot;`
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;sql 패키지에서 제공하는 타입은 당연하겠지만. &lt;code class=&quot;highlighter-rouge&quot;&gt;NullString&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NullBool&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NullInt64&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NullFloat64&lt;/code&gt; 가 있다.&lt;/p&gt;

&lt;p&gt;이후에 이 post struct 를 이용해서 JSON을 만들면 된다.
내 경우에는 추가적으로 IP를 ip1, ip2, ip3, ip4 로 나눴는데 이는 ES 쿼리를 편리하게 하기 위해서다.&lt;/p&gt;

&lt;p&gt;참고로 JSON으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;json.Marshal(post)&lt;/code&gt; 할 때에는 struct 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;json:&quot;-&quot;&lt;/code&gt; 으로 선언한 속성은 Marshal 결과에 포함되지 않는다.&lt;/p&gt;

&lt;p&gt;참고 : https://medium.com/aubergine-solutions/how-i-handled-null-possible-values-from-database-rows-in-golang-521fb0ee267&lt;/p&gt;
</description>
                <pubDate>Tue, 23 Jan 2018 00:00:00 +0900</pubDate>
                <link>https://findstar.pe.kr/til/2018-01-23-TIL</link>
                <guid isPermaLink="true">https://findstar.pe.kr/til/2018-01-23-TIL</guid>
                
                <category>TIL</category>
                
                <category>Golang</category>
                
                <category>mysql</category>
                
                <category>struct</category>
                
                <category>json</category>
                
                
                <category>TIL (Today I Learned)</category>
                
            </item>
        
            <item>
                <title>ElasticSearch 에서 term, match, match_phrase 쿼리에 대한 이해</title>
                <description>&lt;h1 id=&quot;1월-19일-금-til&quot;&gt;1월 19일 (금) TIL&lt;/h1&gt;

&lt;p&gt;작성한 ElasticSearch 쿼리를 테스트 해보다가 정확하게 이해하지 못한 상태고 작성하고 있는 키워드를 발견했다.
작성한 쿼리에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;term&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;match&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;match_phrase&lt;/code&gt;가 무분별하게 사용되고 있었는데, 다시금 문서를 확인해보고, 잊어먹기 전에 정리해봤다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;term&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;term&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;사전적 의미로 보자면 &lt;em&gt;용어&lt;/em&gt; 쯤 되겠다. 해당 content 의 inverted index 에 저장되는 token 들 중에서 쿼리의 키워드와 일치하는 녀석이 있는지 찾아준다.&lt;/p&gt;

&lt;p&gt;original text 가 &lt;em&gt;“여러개의 물건들”&lt;/em&gt;이고, 다음처럼 tokenize 된다면,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -XPOST 'localhost:9200/my_index/_analyze?pretty' -H 'Content-Type: application/json' -d'
{
  &quot;analyzer&quot;: &quot;my_custom_analyzer&quot;,
  &quot;text&quot;: &quot;여러개의 물건들&quot;
}

{
  &quot;tokens&quot; : [
    {
      &quot;token&quot; : &quot;여러&quot;,
      &quot;start_offset&quot; : 0,
      &quot;end_offset&quot; : 2,
      &quot;type&quot; : &quot;MM&quot;,
      &quot;position&quot; : 0
    },
    {
      &quot;token&quot; : &quot;개&quot;,
      &quot;start_offset&quot; : 2,
      &quot;end_offset&quot; : 3,
      &quot;type&quot; : &quot;NNB&quot;,
      &quot;position&quot; : 1
    },
    {
      &quot;token&quot; : &quot;물건&quot;,
      &quot;start_offset&quot; : 5,
      &quot;end_offset&quot; : 7,
      &quot;type&quot; : &quot;NNG&quot;,
      &quot;position&quot; : 2
    },
    {
      &quot;token&quot; : &quot;물건들&quot;,
      &quot;start_offset&quot; : 5,
      &quot;end_offset&quot; : 8,
      &quot;type&quot; : &quot;NNG&quot;,
      &quot;position&quot; : 2
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;term&lt;/code&gt; 쿼리를 통해서 검색 결과에 포함하려면 다음의 4가지 쿼리가 가능하다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;query&quot;: {
    &quot;bool&quot;: {
      &quot;must&quot;: [
        {
          &quot;term&quot;: {
            &quot;content&quot;: &quot;여러&quot;
          }
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;query&quot;: {
    &quot;bool&quot;: {
      &quot;must&quot;: [
        {
          &quot;term&quot;: {
            &quot;content&quot;: &quot;개&quot;
          }
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;query&quot;: {
    &quot;bool&quot;: {
      &quot;must&quot;: [
        {
          &quot;term&quot;: {
            &quot;content&quot;: &quot;물건&quot;
          }
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;query&quot;: {
    &quot;bool&quot;: {
      &quot;must&quot;: [
        {
          &quot;term&quot;: {
            &quot;content&quot;: &quot;물건들&quot;
          }
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;match&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;match&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;term&lt;/code&gt;과 마찬가지로 inverted index 에 저장되는 token 들 중에서 일치하는 녀석이 있는지 찾아주는데, 차이점은 바로 검색하는 키워드를 analyze 한다는 것이다.
이 analyze 한 결과의 token 들 중에서 하나라도 일치하면 결과 document 에 포함된다.&lt;/p&gt;

&lt;p&gt;따라서 original text 가 위와 같을 때 가능한 쿼리는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;query&quot;: {
    &quot;bool&quot;: {
      &quot;must&quot;: [
        {
          &quot;match&quot;: {
            &quot;content&quot;: &quot;여러개&quot;
          }
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;query&quot;: {
    &quot;bool&quot;: {
      &quot;must&quot;: [
        {
          &quot;match&quot;: {
            &quot;content&quot;: &quot;여러사&quot;
          }
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;query&quot;: {
    &quot;bool&quot;: {
      &quot;must&quot;: [
        {
          &quot;match&quot;: {
            &quot;content&quot;: &quot;나의 물건들&quot;
          }
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 밖에 더 있을 수 있다…&lt;/p&gt;

&lt;h3 id=&quot;match_phrase&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;match_phrase&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;phrase&lt;/em&gt; 단어는 사전적 의미는 &lt;em&gt;구&lt;/em&gt; 인데, 흔히 영어 문법 공부할 때 들어보았던 명사구, 부사, 전치사구… 의 &lt;em&gt;구&lt;/em&gt; 이다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;둘 또는 그 이상의 어절로 이루어져 한 덩어리로써 절이나 문장의 성분이 되는 동일한 말의 단위&lt;/code&gt; 라고 한다. 여기서 포인트는 &lt;em&gt;둘 이상!&lt;/em&gt;, &lt;em&gt;이루어져!&lt;/em&gt; 이다.
즉 &lt;code class=&quot;highlighter-rouge&quot;&gt;match&lt;/code&gt; 가 token 들 중에 일치하는 keyword 가 하나라도 존재한다면 결과 document 에 포함된다면,
&lt;code class=&quot;highlighter-rouge&quot;&gt;match_phrase&lt;/code&gt; 가 검색 &lt;code class=&quot;highlighter-rouge&quot;&gt;match&lt;/code&gt; 처럼 keyword를 analyze 하는 것은 동일하나 그 결과 token 들이 모두 존재하고,
순서도 순차적으로 동일한 document 만을 검색 결과에 포함한다는 차이가 있다.&lt;/p&gt;

&lt;p&gt;따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;match&lt;/code&gt; 와 같이 “나의 물건들” 이라는 검색 키워드를 넣는다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;나&lt;/code&gt; 라는 token 이 들어 있지도 않고 순서도 맞지 않으니. &lt;code class=&quot;highlighter-rouge&quot;&gt;여러가지 물건들&lt;/code&gt; 이라는 document 는 결과에 포함되지 않는다.&lt;/p&gt;

&lt;p&gt;이 때 가능한 쿼리는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;query&quot;: {
    &quot;bool&quot;: {
      &quot;must&quot;: [
        {
          &quot;match_phrase&quot;: {
            &quot;content&quot;: &quot;여러개&quot;
          }
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;query&quot;: {
    &quot;bool&quot;: {
      &quot;must&quot;: [
        {
          &quot;match_phrase&quot;: {
            &quot;content&quot;: &quot;여러개의 물건들&quot;
          }
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;순서만 바꿔도 안된다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;query&quot;: {
    &quot;bool&quot;: {
      &quot;must&quot;: [
        {
          &quot;match_phrase&quot;: {
            &quot;content&quot;: &quot;물건들 여러개&quot;
          }
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;사용예&quot;&gt;사용예&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;term&lt;/code&gt; 의 경우에는 문서의 tag 를 검색할 때 사용할 수 있겠다.&lt;/li&gt;
  &lt;li&gt;본문 검색에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;match_phrase&lt;/code&gt; 를 사용하는게 &lt;code class=&quot;highlighter-rouge&quot;&gt;match&lt;/code&gt; 보다는 적합하다고 생각된다. (물론 nested should 와 함께 더 넣어야한다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;오늘도 또 한번 느낀다. RTFM. 문서를 잘 읽자.&lt;/p&gt;
</description>
                <pubDate>Fri, 19 Jan 2018 00:00:00 +0900</pubDate>
                <link>https://findstar.pe.kr/til/2018-01-19-TIL</link>
                <guid isPermaLink="true">https://findstar.pe.kr/til/2018-01-19-TIL</guid>
                
                <category>TIL</category>
                
                <category>ElasticSearch</category>
                
                <category>term</category>
                
                <category>match</category>
                
                <category>match_phrase</category>
                
                <category>query DSL</category>
                
                
                <category>TIL (Today I Learned)</category>
                
            </item>
        
            <item>
                <title>ElasticSearch 에서 wildcard 쿼리에 대한 이해</title>
                <description>&lt;h1 id=&quot;1월-17일-수-til&quot;&gt;1월 17일 (수) TIL&lt;/h1&gt;

&lt;p&gt;ElasticSearch 에서 쿼리를 작성하던 중 wildcard 쿼리의 결과가 내가 생각했던 것 과는 달라서 내용을 정리해본다.
&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html&quot;&gt;wildcard query&lt;/a&gt;를 작성할 때 기대한 것은
RDBMS 의 like ‘%keyword%’ 와 같은 형태가 가능할 것으로 기대했는데, 막상 쿼리 결과를 확인해 보니 원하는 형태가 아니었다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;original text 가 &lt;em&gt;“여러개의 물건들”&lt;/em&gt;이고, 내가 시도한 쿼리는 다음과 같았다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;query&quot;: {
    &quot;bool&quot;: {
      &quot;must&quot;: [
        {
          &quot;wildcard&quot;: {
            &quot;title&quot;: &quot;*여러개*&quot;
          }
        }
      ]
    }
  },
  &quot;size&quot;: 100
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그런데 결과는 아래와 같이 hits count 가 0 이었다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;took&quot;: 243,
  &quot;timed_out&quot;: false,
  &quot;hits&quot;: {
    &quot;total&quot;: 0,
    &quot;max_score&quot;: null,
    &quot;hits&quot;: []
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;원인은 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;wildcard query&lt;/code&gt; 가 term level query 이기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/term-level-queries.html&quot;&gt;term level query&lt;/a&gt; 문서를 확인해 보자. (진작에 좀 읽었어야 하는데..)&lt;/p&gt;

&lt;p&gt;term 즉 inverted index 를 기준으로 결과를 찾는다는 의미다. 다시 말해 analyzed 된 term keyword 가 있어야 하며,
문서를 색인할 때 토크나이징된 단어가 아니라면 inverted index에 들어 있지 않기 때문에, 아예 비교 대상에 포함되지 않는 것이다.&lt;/p&gt;

&lt;p&gt;내가 테스트한 custom analyzer의 토크나이징은 아래와 같았으니,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -XPOST 'localhost:9200/my_index/_analyze?pretty' -H 'Content-Type: application/json' -d'
{
  &quot;analyzer&quot;: &quot;my_custom_analyzer&quot;,
  &quot;text&quot;: &quot;여러개의 물건들&quot;
}


{
  &quot;tokens&quot; : [
    {
      &quot;token&quot; : &quot;여러&quot;,
      &quot;start_offset&quot; : 0,
      &quot;end_offset&quot; : 2,
      &quot;type&quot; : &quot;MM&quot;,
      &quot;position&quot; : 0
    },
    {
      &quot;token&quot; : &quot;개&quot;,
      &quot;start_offset&quot; : 2,
      &quot;end_offset&quot; : 3,
      &quot;type&quot; : &quot;NNB&quot;,
      &quot;position&quot; : 1
    },
    {
      &quot;token&quot; : &quot;물건&quot;,
      &quot;start_offset&quot; : 5,
      &quot;end_offset&quot; : 7,
      &quot;type&quot; : &quot;NNG&quot;,
      &quot;position&quot; : 2
    },
    {
      &quot;token&quot; : &quot;물건들&quot;,
      &quot;start_offset&quot; : 5,
      &quot;end_offset&quot; : 8,
      &quot;type&quot; : &quot;NNG&quot;,
      &quot;position&quot; : 2
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;토크나이징된 결과에 &lt;em&gt;“여러개”&lt;/em&gt; 라는 단어는 없기 때문에, 처음 질의한 wildcard 결과가 hits가 0 일 수 밖에 없었던 것이다.&lt;/p&gt;

&lt;p&gt;아 문서를 좀 더 잘 읽자.. 오늘의 교훈 &lt;em&gt;“RTFM”&lt;/em&gt;&lt;/p&gt;
</description>
                <pubDate>Wed, 17 Jan 2018 00:00:00 +0900</pubDate>
                <link>https://findstar.pe.kr/til/2018-01-17-TIL</link>
                <guid isPermaLink="true">https://findstar.pe.kr/til/2018-01-17-TIL</guid>
                
                <category>TIL</category>
                
                <category>ElasticSearch</category>
                
                <category>wildcard</category>
                
                <category>query DSL</category>
                
                <category>inverted index</category>
                
                
                <category>TIL (Today I Learned)</category>
                
            </item>
        
            <item>
                <title>느려진 PHPStorm에서 Heap Memory를 늘리는 방법</title>
                <description>&lt;h1 id=&quot;1월-05일-금-til&quot;&gt;1월 05일 (금) TIL&lt;/h1&gt;

&lt;p&gt;이전에, phpstorm에서 사용하지 않는 플러그인을 비활성화 시켜서 약간의 속도 향상을 가져왔다면, 이제는 아예 Heap Memory Size를 늘려보기로 했다.
IDE를 사용하다가 보면 열어둔 Tab이 많아지면서 슬슬 Heap memory size가 차기 시작하는데, 이건 예전에 Eclipse를 쓸 때 부터, Intellij, Webstorm, Phpstorm 가리지 않고 나타나는 증상이다.
커서가 렉 걸린 것 처럼 느리게 이동하기 시작하면, 우측 하단에 Memory Indicator를 바라보고는, 여기서 매번 Heap Memory Size 를 확인하고 클릭해주면서 한번씩 정리가 되는데, 그러고 나면 다시 괜찮아지고는 했다.
아예 Heap Memory Size 설정을 변경하기 위해서 설정을 변경해봤다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;먼저 heap memory 를 정확하게 확인하기 위해서 memory indicator를 확인해보자.&lt;/p&gt;

&lt;p&gt;1  먼저 설정의 appearance 에서 window option의 show memory indicato를 켜자.&lt;/p&gt;

&lt;figure class=&quot;caption&quot;&gt;
    &lt;img src=&quot;/images/posts/til/2018-01-05/phpstorm_memory_indicator.png&quot; alt=&quot;phpstorm show memory indicator&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;2  그러면 에디터 우측 하단에 요렇게 메모리가 표시된다&lt;/p&gt;

&lt;figure class=&quot;caption&quot;&gt;
    &lt;img src=&quot;/images/posts/til/2018-01-05/phpstorm_show_memory.png&quot; alt=&quot;phpstorm show memory&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;3  그런다음의 help 메뉴의 Edit Custom Vm Option을 선택하자&lt;/p&gt;

&lt;figure class=&quot;caption&quot;&gt;
    &lt;img src=&quot;/images/posts/til/2018-01-05/phpstorm_help_menu.png&quot; alt=&quot;phpstorm help menu&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;4  이제 Custom Option을 지정하면 되는데 핵심은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Xmx&lt;/code&gt; 부분인데 maximum memory 이다.
이걸 머신의 ram 에 따라서 늘려주자 내가 쓰는 맥북의 RAM은 16G 인데 Xmx 를 처음에는 500M 에서 2G 로 변경해줬다.&lt;/p&gt;

&lt;figure class=&quot;caption&quot;&gt;
    &lt;img src=&quot;/images/posts/til/2018-01-05/phpstorm_custom_vm_option.png&quot; alt=&quot;phpstorm custom vm option&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;이제 IDE를 재시작하면 늘어난 memory 를 indicator 에서 확인가능하고, 버벅거림이 훨~~~씬 줄어들었다.&lt;/p&gt;
</description>
                <pubDate>Fri, 05 Jan 2018 00:00:00 +0900</pubDate>
                <link>https://findstar.pe.kr/til/2018-01-05-TIL</link>
                <guid isPermaLink="true">https://findstar.pe.kr/til/2018-01-05-TIL</guid>
                
                <category>TIL</category>
                
                <category>phpstorm</category>
                
                <category>speed up</category>
                
                <category>vm options</category>
                
                
                <category>TIL (Today I Learned)</category>
                
            </item>
        
    </channel>
</rss>